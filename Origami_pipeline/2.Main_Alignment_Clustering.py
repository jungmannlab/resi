#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: Susanne Reinhardt
DESCRIPTION

Input: Path to a folder containing the hdf5 files generated by the
Seperate_Picks.py script for both imaging rounds.
"""


'''
=============================================================================
User Input
=============================================================================
'''

'''Pixel Size of your data in nm.'''
px_size = 130

'''Path to the folder containing Origami hdf5 files''' 
path = r"W:\users\reinhardt\z.software\Git\RESI\RESI\Origami_pipeline\TestData"


'''Filename of round 1 and round 2. This part of the filename must be common 
   to all _oriN.hdf5 files of one imaging round.'''
round1_filename_base = "R1_filter_apicked"
round2_filename_base = "R3_filter_apicked"


'''Choose a short name to identify each round. 
   This will be used to name output files.'''
round1_name = "R1_filter_apicked"
round2_name = "R3_filter_apicked"


'''Clustering Parameters'''
radius_xy = 7
radius_z = 20 # set to 0 for 2d data
N_min = 30




'''
=============================================================================
Script - No need for modifications
=============================================================================
'''


import sys
import glob
import os
import os.path
import itertools

from Functions.Alignment.find_eucl_transf_f import find_eucl_transf_f
from Functions.Alignment.apply_eucl_transf_f import apply_eucl_transf_f
#from MainFunctions.Clusterer_resi_f import clusterer_resi
#from MainFunctions.Cluster_PostProcessing_new_f import postprocessing
#from MainFunctions.Cluster_PostProcessing_new_f import postprocessing_cross



data = [[round1_name, round1_filename_base, radius_xy, N_min],
        [round2_name, round2_filename_base, radius_xy, N_min]]



'''Find euclidian transformation.'''
'''============================================================================'''
# This code expects two different channels!
if len(data) != 2:
    raise Exception("There must be data from exactly two channels!")

# Before running the code for finding the transformation, check if the output file
# eucl_transf_data.xlsx already exists from a previous run of the code.
eucl_transf_data = os.path.join(path,"eucl_transf/eucl_transf_data.xlsx")
if os.path.isfile(eucl_transf_data) != True: 
    print("Find best Euclidian transformation for channel alignment")
    # The transformation will be performed on the R4 sites in both rounds
    # Round 1 = Channel R1, Round 2 = Channel R3
    
    path_alignment_picks = os.path.join(path,"alignment_picks")

    if not os.path.isdir(path_alignment_picks):
            raise Exception("The folder containing the alignment picks was not found. Check if it is named 'alignment_picks'.")

    ch13_files = glob.glob(os.path.join(path_alignment_picks, "*.hdf5"))
    ch1_files = sorted(file for file in ch13_files if data[0][1] in file)

    # get the respective list for the ch3 files. 
    # Instead of extracting it in the same way from the ch13_files list
    # it will be created from the ch1_files list. If it would be extracted
    # from ch3_files, we might not notice if files in ch3 are missing.... 
    ch3_files = []
    for ch1_file in ch1_files:
        ch3_file = ch1_file.replace(data[0][1], data[1][1])
        ch3_files.append(ch3_file)


    if ch1_files == [] or ch3_files == []:
        sys.exit("No files in channel 1 and/ore channel 2 were found.")
    find_eucl_transf_f(path, ch1_files, ch3_files, px_size)

else:
    print("Euclidian transformation for channel alignment has already been determined.")



'''Apply euclidian transformation to R3 channel.'''
'''============================================================================'''
# Before running the code for finding the transformation, check if the output file
# eucl_transf_data.xlsx already exists from a previous run of the code.

eucl_transf_data = os.path.join(path,"eucl_transf/eucl_transf_data.xlsx")
if os.path.isfile(eucl_transf_data) == True:
    ch13_files = glob.glob(os.path.join(path, "*.hdf5"))
    ch1_files = sorted(file for file in ch13_files if data[0][1] in file and "ori" in file and "ClusterD" not in file and "_resi_" not in file)

    ch3_files = []
    for ch1_file in ch1_files:
        ch3_file = ch1_file.replace(data[0][1], data[1][1])
        ch3_files.append(ch3_file)
        #print("1", ch1_file)
        #print("3", ch3_file)

    check_aligned_file = os.path.split(ch3_files[-1])[1]
    check_aligned_file = os.path.split(ch3_files[-1])[0] + "/" + check_aligned_file[:-5] + "_aligned.hdf5"
    if os.path.isfile(check_aligned_file) != True:
        apply_eucl_transf_f(path, ch1_files, ch3_files)

else:
    raise Exception("Euclidian transformation for channel alignment has not yet been determined.")

